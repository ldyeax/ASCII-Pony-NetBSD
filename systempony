#!/usr/pkg/bin/bash

# These global variables can be overridden by config
# Name of the pony
PONY=random
# What info to show (must have a function defined as ponyget_* to work)
INFO=(User Hostname IP Distro Kernel Uptime Load Shell Packages CPU Threads RAM Swap Disk)
# File system type to show disk usage (default/empty=all) (see df for specific values)
FSTYPE=
# Interface to get the IP address from
IP_INTERFACE="fxp0"

function ponyget_Shell()
{
    echo "$SHELL"
}

function ponyget_User()
{
    whoami
}

function ponyget_Distro()
{
    echo "NetBSD"
}

function pccolor()
{
    local color="32"
    if [ "$1" -gt 66 ]
    then
        color="31"
    elif [ "$1" -gt 33 ]
    then
        color="33"
    fi
    printf "\033[${color};1m"
}

function ponyget_RAM()
{
    local used=$(vmstat -s | grep 'pages active' | awk '{print $1}')
    local total=$(vmstat -s | grep 'pages managed' | awk '{print $1}')
    local percent=$(echo "scale=2; 100*$used/$total" | bc)
    local percentInt=$(echo "$percent" | cut -d. -f1)
    printf "$(pccolor $percentInt)%.2f%%\x1b[0m / %s\n" "$percent" "$(echo "$total * 4096" | bc)"
}

function ponyget_Swap()
{
    local used=$(vmstat -s | grep 'swap pages in use' | awk '{print $1}')
    local total=$(vmstat -s | grep -E 'swap pages$' | awk '{print $1}')
    local percent=0
    if [ "$total" -ne "0" ]
    then
        percent=$(echo "scale=2; 100*$used/$total" | bc)
    fi
    local percentInt=$(echo "scale=0; $percent" | bc)
    printf "$(pccolor $percentInt)%.2f%%\x1b[0m / %s\n" "$percent" "$(echo "$total * 4096" | bc)"
}

function ponyget_Kernel()
{
    uname -r -m
}

function ponyget_Hostname()
{
    hostname
}

function ponyget_CPU()
{
    sysctl -n machdep.cpu_brand
}

function ponyget_Threads()
{
    sysctl -n hw.ncpu
}

function ponyget_CPU_Usage()
{
    sysctl -n kern.cp_time | awk '{usage=100-($4*100)/($1+$2+$3+$4+$5+$6+$7+$8)} END {print usage}'
}

function ponyget_CPU_Temperature()
{
    sysctl -n hw.sensors.cpu0.temp0
}

function ponyget_Uptime()
{
    uptime | awk -F',|:' '{if ($7 == "days") printf "%d days, %d hours, %d minutes", $3, $5, $6; else printf "%d hours, %d minutes", $3, $4}'
}

function ponyget_Load()
{
    uptime | awk -F'load averages:' '{print $2}' | awk '{$1=$1};1'
}

function ponyget_Packages()
{
    pkg_info | wc -l | awk '{$1=$1};1'
}

function ponyget_Disk()
{
    local dfoption="$FSTYPE"
    [ "$dfoption" ] && dfoption="-t $FSTYPE"
    local diskusage=$(df -lh $dfoption | grep raid0a | awk '{ gsub(/ +/,"\t"); print }')
    local used=$(echo "$diskusage" | cut -f 3)
    local total=$(echo "$diskusage" | cut -f 2)
    local percent=$(echo "$diskusage" | cut -f 5 | sed s/%//)
    local percentInt=$(echo "$percent" | cut -d. -f1)

    echo -e "$(pccolor $percentInt)$used\x1b[0m / $total"
}

function ponyget_Containers()
{
    local active="$(lxc-ls --active | wc -l)"
    local total="$(lxc-ls | wc -l)"
    local color=32
    if [ "$active" -lt "$total" ]
    then
        color=31
    fi
    echo -e "\x1b[$color;1m$active\x1b[0m / $total active"
}

function ponyget_IP()
{
    if [ -z "$1" ]; then
        inet="inet"
    else
        inet="$1"
    fi
    ifconfig $IP_INTERFACE | awk "/$inet /{print \$2}"
}

function ponyget_IPv6()
{
    ponyget_IP inet6
}

function bold()
{
    echo -en "\x1b[1m${*}\x1b[22m"
}

function underline()
{
    echo -en "\x1b[4m${*}\x1b[24m"
}

function title()
{
    echo
    bold ${*}
    echo
}

function help()
{
    title NAME
    echo -e "\t$(bold $0) - show a pony and some system information"

    title SYNOPSIS
    echo -e "\t$(bold $0) [$(bold --pony) $(underline pony)|$(bold -p)$(underline pony)] [$(bold --info) $(underline id)|$(bold -i)$(underline id)...]"
    echo -e "\t$(bold $0) $(bold help)|$(bold --help)|$(bold -h)"

    title OPTIONS
    echo -e "\t$(bold --pony) $(underline pony), $(bold -p)$(underline pony)"
    echo -e "\t\tSelect a pony (default: $PONY)."
    echo
    echo -e "\t$(bold --info) $(underline id), $(bold -i)$(underline id)"
    echo -e "\t\tShow the given info (default: ${INFO[@]})."
    echo -e "\t\tThis option supports multiples IDs separated by commas, spaces or colons."
    echo -e "\t\tAvailable IDs:"
    declare -F | grep ponyget_ | sed "s/declare -f ponyget_/\t\t * /"
    echo
    echo -e "\t$(bold --list), $(bold --list-ponies)"
    echo -e "\t\tShows a list of possible values for $(bold --pony)."

    title CONFIGURATION
    echo -e "\tYou can override $(bold PONY) and $(bold INFO) in the config files."
    echo -e "\tConfiguration files:"
    echo -e "\t * $(underline PREFIX)$(bold /share/ascii-pony/systempony.conf) (system)"
    echo -e "\t * $(bold ~/.systempony) (user)"

    echo
}

function list_ponies()
{
    ponydir=$(get_data_file "rendered/ansi/")
    echo random
    find "$ponydir" -name '*.ansi' -exec basename {} .ansi \; | sort
}

function select_info()
{
    INFO=($(echo "${*}" | column -t -s:,))
}

SELFDIR="~/systempony/"
function get_data_file()
{
    echo "/home/jimm/systempony/$1"
}

# Returns the number of displayed characters, ignoring color codes
function strlen_color()
{
    echo -n "$1" | sed -r 's/\x1b\[[0-9;]+m//g' | wc -c
}

# Truncates a string
function truncate_color()
{
    # local length="$(strlen_color "$1")"
    # local target="$2"
    # if [ "$length" -gt "$target" ]
    # then
    #     let cut="$length-$target"
    #     echo -n "$1" | sed "s/.\{$cut\}$//"
    #     return
    # fi
    echo "$1"
}

# Read global config
globalconfig=$(get_data_file systempony.conf)
if [ -r "$globalconfig" ]
then
    source "$globalconfig"
fi
# Read user config
if [ -r ~/.systempony ]
then
    source ~/.systempony
fi

# Read parameters
while [ "$1" ]
do
    case "$1" in
        --help|-h|help)
            help
            exit 0
            ;;
        --list|--list-ponies)
            list_ponies
            exit 0
            ;;
        --pony|-p)
            shift
            PONY="$1"
            ;;
        -p=*|--pony=*)
            PONY="$(echo "$1" | sed -r "s/^(-p|--pony)=//")"
            ;;
        --info|-i)
            infostring=""
            while [ "$2" ] && ! echo "$2" | grep -q -e "-"
            do
                infostring="$infostring $2"
                shift
            done
            select_info "$infostring"
            ;;
        -i=*|--info=*)
            select_info "$(echo "$1" | sed -r "s/^(-i|--info)=//")"
            ;;
    esac
    shift
done

# Evaluate info
info_values=()
let info_key_max_length=0
let info_val_max_length=0
function addinfo()
{
    info_values+=("${2}")
    local key_length=$(echo "$1" | wc -c)
    local val_length=$(echo "${2}" | wc -c)
    [ $key_length -gt $info_key_max_length ] && info_key_max_length=$key_length;
    [ $val_length -gt $info_val_max_length ] && info_val_max_length=$val_length;
}
for info in ${INFO[*]}
do
    if [ "$(type -t ponyget_${info})" = "function" ]
    then
        addinfo $info "$(ponyget_${info})"
    else
        addinfo $info "unsupported"
    fi
done

if [ -f "$PONY" ]
then
    ponyfile="$PONY"
elif [ "$PONY" = nopony ]
then
    ponyfile=/dev/null
else
    ponydir=$(get_data_file "rendered/ansi/")
    ponyfile="$ponydir/$PONY.ansi"
    if [ -n "$ponydir" -a '(' \! -f "$ponyfile" -o "$PONY" = random ')' ]
    then
        ponyfile="$(find "$ponydir" -name '*.ansi' | shuffle | head -n 1)"
    fi
fi


declare -A info_firstx # Number of characters before the system info output
info_firstx[applejack-nohat]=64
info_firstx[applejack]=70
info_firstx[bigmac]=42
info_firstx[celestia]=76
info_firstx[cadance]=55
info_firstx[derpy]=61
info_firstx[fluttershy]=67
info_firstx[great-and-powerful]=68
info_firstx[luna]=67
info_firstx[lyra]=61
info_firstx[pinkie-pie]=61
info_firstx[rainbow-dash]=61
info_firstx[rainbow]=61
info_firstx[rarity]=61
info_firstx[rose]=61
info_firstx[trixie]=61
info_firstx[twilight-alicorn]=61
info_firstx[twilight-unicorn]=61
info_firstx[vinyl-scratch-glasses]=69
info_firstx[vinyl-scratch-noglasses]=69

declare -A info_firsty # Number of lines before the system info output
info_firsty[luna]=18
info_firsty[rarity]=11
info_firsty[trixie]=16
info_firsty[twilight-unicorn]=10
info_firsty[twilight-alicorn]=10

if [ -f "$ponyfile" ]
then
    lines=$(cat "$ponyfile" | wc -l | awk '{$1=$1};1') # cat to avoid printing file name
    #echo "lines: $lines"
    let info_index=0
    COLUMNS=$(tput cols || echo 1024)


    if [ "${info_firstx[$PONY]}" ]
    then
        info_x=${info_firstx[$PONY]}
    else
        info_x=80
    fi

    if [ "${info_firsty[$PONY]}" ]
    then
        #echo "condition 1"
        start_line=${info_firsty[$PONY]}
    else
        #echo "condition 2"
        let start_line=($lines-${#INFO[@]})/2
    fi

    #echo "start line: $start_line"

    let current_line=1
    while IFS= read -r  line
    do
        if ((info_index < ${#INFO[@]} && current_line >= start_line))
        then
            let msgsize="$COLUMNS - $info_x - $info_key_max_length - 4"
            line="$(truncate_color "$line" $info_x)"
            printf "%s \x1b[31;1m%-${info_key_max_length}s\x1b[0m: %s %s\n" \
                "$line$backspaces" \
                "${INFO[$info_index]}" \
                "$(truncate_color "${info_values[$info_index]}" $msgsize)"
            let info_index++
        else
            echo -n "$line"
            echo -e "\x1b[0m"
        fi
        let current_line++
    done < "$ponyfile"
else
    let info_index=0
    while [ $info_index -lt ${#INFO[@]} ]
    do
        printf "\x1b[31;1m%-${info_key_max_length}s\x1b[0m: %s\n" \
            "${INFO[$info_index]}" \
            "${info_values[$info_index]}"
        let info_index++
    done
fi

